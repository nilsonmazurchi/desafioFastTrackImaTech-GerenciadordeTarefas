name: CI/CD - Gerenciador de Tarefas

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: nilsonmazurchi
  SERVICE_NAME: gerenciador-tarefas

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint HTML, CSS and JS
        run: |
          echo "Executando lint b√°sico..."
          npm install -g htmlhint stylelint eslint || true
          npx htmlhint "**/*.html" || true
          npx stylelint "**/*.css" || true
          npx eslint "**/*.js" || true

  test:
    name: Test Build (Static Files)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate HTML and CSS
        run: |
          echo "Verificando se os arquivos est√£o v√°lidos..."
          ls -l
          test -f index.html || (echo "Faltando index.html!" && exit 1)
          test -f style.css || echo "Aviso: style.css n√£o encontrado"
          test -f script.js || echo "Aviso: script.js n√£o encontrado"

  build-and-push:
    name: Build and Push Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.set-outputs.outputs.docker_image_name }}
      docker_image_tag: ${{ steps.set-outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set outputs
        id: set-outputs
        run: |
          echo "docker_image_name=${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=1.0.${{ github.run_id }}" >> $GITHUB_OUTPUT

  # üöÄ DEPLOY E DESTROY NO MESMO JOB (Solu√ß√£o mais simples)
  deploy-and-destroy:
    name: üöÄ Deploy ‚Üí Wait ‚Üí Destroy
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        run: terraform -chdir=infra validate

      # üöÄ FASE 1: DEPLOY
      - name: Terraform Apply
        id: apply
        run: |
          echo "üöÄ APLICANDO INFRAESTRUTURA..."
          terraform -chdir=infra apply -auto-approve
          
          # Lista recursos criados para debug
          echo "üìã RECURSOS CRIADOS:"
          terraform -chdir=infra state list
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ needs.build-and-push.outputs.docker_image_name }}
          TF_VAR_docker_image_tag: ${{ needs.build-and-push.outputs.docker_image_tag }}

      # ‚è∞ FASE 2: WAIT
      - name: Wait 240 seconds
        run: |
          echo "‚è∞ AGUARDANDO 240 SEGUNDOS ANTES DO DESTROY..."
          echo "‚åõ In√≠cio: $(date)"
          sleep 240
          echo "‚úÖ Fim: $(date) - Iniciando destroy"

      # üóëÔ∏è FASE 3: DESTROY
      - name: Terraform Destroy
        run: |
          echo "üö® INICIANDO DESTROY AUTOM√ÅTICO..."
          
          # Verifica estado atual
          echo "üìã ESTADO ATUAL ANTES DO DESTROY:"
          terraform -chdir=infra state list || echo "Nenhum recurso no estado"
          
          # Destr√≥i tudo
          terraform -chdir=infra destroy -auto-approve -refresh=true
          
          echo "‚úÖ DESTROY CONCLU√çDO!"
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

  # üê≥ LIMPEZA DOCKER (separado para n√£o afetar o terraform)
  cleanup-docker:
    name: üê≥ Cleanup Docker Images
    runs-on: ubuntu-latest
    needs: deploy-and-destroy
    
    steps:
      - name: Delete Docker Images via API
        run: |
          echo "üßπ LIMPANDO IMAGENS DOCKER VIA API..."
          
          # Deleta imagem espec√≠fica do run
          curl -X DELETE \
            -u "${{ env.DOCKER_USER }}:${{ secrets.DOCKER_PASS }}" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/1.0.${{ github.run_id }}/" \
            || echo "‚ö†Ô∏è  Imagem run n√£o encontrada"
          
          # Deleta imagem pelo SHA (apenas primeiros 10 chars)
          SHORT_SHA=${GITHUB_SHA:0:10}
          curl -X DELETE \
            -u "${{ env.DOCKER_USER }}:${{ secrets.DOCKER_PASS }}" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/$SHORT_SHA/" \
            || echo "‚ö†Ô∏è  Imagem SHA n√£o encontrada"
          
          echo "‚úÖ LIMPEZA DOCKER CONCLU√çDA!"
