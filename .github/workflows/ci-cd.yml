name: CI/CD - Gerenciador de Tarefas

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: nilsonmazurchi
  SERVICE_NAME: gerenciador-tarefas

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint HTML, CSS and JS
        run: |
          echo "Executando lint b√°sico..."
          npm install -g htmlhint stylelint eslint || true
          npx htmlhint "**/*.html" || true
          npx stylelint "**/*.css" || true
          npx eslint "**/*.js" || true

  test:
    name: Test Build (Static Files)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate HTML and CSS
        run: |
          echo "Verificando se os arquivos est√£o v√°lidos..."
          ls -l
          test -f index.html || (echo "Faltando index.html!" && exit 1)
          test -f style.css || echo "Aviso: style.css n√£o encontrado"
          test -f script.js || echo "Aviso: script.js n√£o encontrado"

  build-and-push:
    name: Build and Push Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.set-outputs.outputs.docker_image_name }}
      docker_image_tag: ${{ steps.set-outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set outputs
        id: set-outputs
        run: |
          echo "docker_image_name=${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=1.0.${{ github.run_id }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Koyeb
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    
    outputs:
      terraform_state: ${{ steps.save-state.outputs.terraform_state }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        id: apply
        run: |
          echo "üöÄ Aplicando infraestrutura..."
          terraform -chdir=infra apply -auto-approve
          echo "resources_created=true" >> $GITHUB_OUTPUT
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ needs.build-and-push.outputs.docker_image_name }}
          TF_VAR_docker_image_tag: ${{ needs.build-and-push.outputs.docker_image_tag }}

      - name: Salvar estado do Terraform
        id: save-state
        run: |
          echo "üíæ Salvando estado do Terraform..."
          # Lista recursos criados
          terraform -chdir=infra state list
          # Salva informa√ß√µes do estado
          echo "terraform_state=applied_${{ github.run_id }}" >> $GITHUB_OUTPUT
          
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.run_id }}
          path: infra/.terraform
          retention-days: 1

  wait-before-destroy:
    name: ‚è∞ Wait 4 Minutes
    runs-on: ubuntu-latest
    needs: deploy
    environment: staging
    
    steps:
      - name: Wait for 240 seconds
        run: |
          echo "‚è∞ Aguardando 240 segundos antes do destroy..."
          echo "‚åõ In√≠cio: $(date)"
          sleep 240
          echo "‚úÖ Fim: $(date) - Pronto para destroy"

  destroy:
    name: Destroy Koyeb Staging
    runs-on: ubuntu-latest
    needs: wait-before-destroy
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-${{ github.run_id }}
          path: infra/.terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (com estado)
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: List Resources Before Destroy
        run: |
          echo "üìã Recursos existentes:"
          terraform -chdir=infra state list || echo "Nenhum recurso no estado"

      - name: Terraform Destroy (FOR√áADO)
        run: |
          echo "üö® DESTRUINDO AUTOMATICAMENTE AP√ìS DEPLOY..."
          # For√ßa o destroy mesmo que alguns recursos j√° tenham sido removidos
          terraform -chdir=infra destroy -auto-approve -refresh=true
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

  cleanup-docker:
    name: üê≥ Cleanup Docker Images
    runs-on: ubuntu-latest
    needs: destroy
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Delete Docker Images via API
        run: |
          echo "üßπ Limpando imagens Docker via API..."
          
          # Instala curl se necess√°rio
          which curl || apt-get update && apt-get install -y curl
          
          # Deleta imagem espec√≠fica do run
          curl -X DELETE \
            -u "${{ env.DOCKER_USER }}:${{ secrets.DOCKER_PASS }}" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/1.0.${{ github.run_id }}/" \
            || echo "‚ùå Imagem run n√£o encontrada ou n√£o p√¥de ser deletada"
          
          # Deleta imagem pelo SHA (apenas os primeiros 10 caracteres)
          SHORT_SHA=${GITHUB_SHA:0:10}
          curl -X DELETE \
            -u "${{ env.DOCKER_USER }}:${{ secrets.DOCKER_PASS }}" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/$SHORT_SHA/" \
            || echo "‚ùå Imagem SHA n√£o encontrada ou n√£o p√¥de ser deletada"
          
          echo "‚úÖ Tentativa de limpeza Docker conclu√≠da!"