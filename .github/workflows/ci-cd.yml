name: CI/CD - Gerenciador de Tarefas

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: nilsonmazurchi
  SERVICE_NAME: gerenciador-tarefas

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint HTML, CSS and JS
        run: |
          echo "Executando lint b√°sico..."
          npm install -g htmlhint stylelint eslint || true
          npx htmlhint "**/*.html" || true
          npx stylelint "**/*.css" || true
          npx eslint "**/*.js" || true

  test:
    name: Test Build (Static Files)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate HTML and CSS
        run: |
          echo "Verificando se os arquivos est√£o v√°lidos..."
          ls -l
          test -f index.html || (echo "Faltando index.html!" && exit 1)
          test -f style.css || echo "Aviso: style.css n√£o encontrado"
          test -f script.js || echo "Aviso: script.js n√£o encontrado"

  build-and-push:
    name: Build and Push Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.set-outputs.outputs.docker_image_name }}
      docker_image_tag: ${{ steps.set-outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set outputs
        id: set-outputs
        run: |
          echo "docker_image_name=${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=1.0.${{ github.run_id }}" >> $GITHUB_OUTPUT

  # üéØ TUDO EM UM JOB S√ì: Deploy ‚Üí Wait ‚Üí Destroy Koyeb ‚Üí Destroy Docker
  deploy-wait-destroy:
    name: üöÄ Deploy ‚Üí Wait ‚Üí Destroy
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # üöÄ FASE 1: DEPLOY KOYEB
      - name: Deploy to Koyeb
        run: |
          echo "üöÄ INICIANDO DEPLOY NO KOYEB..."
          terraform -chdir=infra init
          terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ needs.build-and-push.outputs.docker_image_name }}
          TF_VAR_docker_image_tag: ${{ needs.build-and-push.outputs.docker_image_tag }}

      # ‚è∞ FASE 2: WAIT
      - name: Wait 60 seconds
        run: |
          echo "‚è∞ AGUARDANDO 60 SEGUNDOS..."
          sleep 60
          echo "‚úÖ PRONTO PARA DESTROY"

      # üóëÔ∏è FASE 3: DESTROY KOYEB
      - name: Destroy Koyeb
        run: |
          echo "üóëÔ∏è DESTRUINDO APLICA√á√ÉO NO KOYEB..."
          terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      # üê≥ FASE 4: DESTROY DOCKER IMAGES
      - name: Destroy Docker Images
        run: |
          echo "üê≥ DELETANDO IMAGENS DO DOCKER HUB..."
          
          # Token para API do Docker Hub
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "'${{ env.DOCKER_USER }}'", "password": "'${{ secrets.DOCKER_PASS }}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Deleta imagem pelo tag do run_id
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/1.0.${{ github.run_id }}/" \
            && echo "‚úÖ Imagem 1.0.${{ github.run_id }} deletada" \
            || echo "‚ö†Ô∏è  Imagem 1.0.${{ github.run_id }} n√£o encontrada"
          
          # Deleta imagem pelo SHA
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/${{ github.sha }}/" \
            && echo "‚úÖ Imagem ${{ github.sha }} deletada" \
            || echo "‚ö†Ô∏è  Imagem ${{ github.sha }} n√£o encontrada"

          # Deleta Tag LATEST
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}/tags/latest/" \
            && echo "‚úÖ Tag latest DELETADA" \
            || echo "‚ö†Ô∏è  Tag latest n√£o encontrada"
          
          echo "üéØ LIMPEZA CONCLU√çDA!"